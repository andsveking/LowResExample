local common = require("main.common")

function add_res_button(self, y, width, height, label)
	local nodes = gui.clone_tree(self.template_node)
	
	local button = {
		node_bg    = nodes[hash("res-button/button")],
		node_label = nodes[hash("res-button/label")],
		width      = width,
		height     = height
	}
	table.insert(self.buttons, button)
	
	-- reposition clone
	local p = gui.get_position(button.node_bg)
	p.y = y
	gui.set_position(button.node_bg, p)
	
	-- set correct res label
	if (label) then
		gui.set_text(button.node_label, tostring(label) .. " ("..tostring(width) .. "x" .. tostring(height)..")")
	else
		gui.set_text(button.node_label, tostring(width) .. "x" .. tostring(height))
	end
end

function init(self)

	msg.post(".", "acquire_input_focus")

    self.template_node = gui.get_node("res-button/button")
    self.buttons = {}
	self.resolutions = {
		{ common.native_width, common.native_height, "Default" },
		{ common.native_width*1.5, common.native_height*1.5, "x1.5" },
		{ common.native_width*2.0, common.native_height*2.0, "x2" },
		{ common.native_width*2.5, common.native_height*2.5, "x2.5" },
		{ common.native_width*3.0, common.native_height*3.0, "x3" }
	}
	
	local y = -70
	for k,v in pairs(self.resolutions) do
		add_res_button(self, y, v[1], v[2], v[3])
		y = y - 40
	end
end

function on_input(self, action_id, action)

	if (action_id == hash("touch") and action.pressed) then
		for k,button in pairs(self.buttons) do
			local hit = gui.pick_node(button.node_bg, action.x, action.y)
			
			if (hit) then
				local arg1 = '--config=bootstrap.main_collection=/main/main.collectionc'
				local arg2 = '--config=display.width='..tostring(button.width)
				local arg3 = '--config=display.height='..tostring(button.height)
				msg.post("@system:", "reboot", {arg1 = arg1, arg2 = arg2, arg3 = arg3})
				break
			end
		end
	end

end