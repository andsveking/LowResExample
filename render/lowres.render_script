local common = require("main.common")

function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})
    self.comp_pred = render.predicate({"comp"})

    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

    self.view = vmath.matrix4()
    
    -- render-to-texture-mode
    if (common.rrt) then
    
    	-- create a fancy render target
	    local rt_prop_depth = {
	        format = render.FORMAT_DEPTH,
	        width = common.native_width,
	        height = common.native_height,
	        u_wrap = render.WRAP_CLAMP_TO_EDGE,
	        v_wrap = render.WRAP_CLAMP_TO_EDGE,
	        min_filter = render.FILTER_NEAREST,
	        mag_filter = render.FILTER_NEAREST,
	    }
	    local rt_prop_color = {
	        format = render.FORMAT_RGBA,
	        width = common.native_width,
	        height = common.native_height,
	        u_wrap = render.WRAP_CLAMP_TO_EDGE,
	        v_wrap = render.WRAP_CLAMP_TO_EDGE,
	        min_filter = render.FILTER_NEAREST,
	        mag_filter = render.FILTER_NEAREST,
	    }
	    local rt_prop = {[render.BUFFER_COLOR_BIT] = rt_prop_color, [render.BUFFER_DEPTH_BIT] = rt_prop_depth}
    
    	self.render_target = render.render_target("comp", rt_prop)
    end
end

function render_game(self)

	if (common.rrt) then
		render.enable_render_target(self.render_target)
	end

	render.set_depth_mask(true)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})	

    render.set_viewport(0, 0, common.native_width, common.native_height)
    render.set_view(self.view)

    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)

    render.set_projection(vmath.matrix4_orthographic(0, common.native_width, 0, common.native_height, -1, 1))

    render.draw(self.tile_pred)
    render.draw(self.particle_pred)
    render.draw_debug3d()
    
    if (common.rrt) then
		render.disable_render_target(self.render_target)
	end
end

function update(self)

	render_game(self)
	
	render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
	if (common.rrt) then
		render.set_depth_mask(false)
    	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})	
    
		render.set_view(vmath.matrix4())
		render.set_projection(vmath.matrix4_orthographic(-1, 1, -1, 1, -1, 1))
		render.disable_state(render.STATE_CULL_FACE)
		render.enable_texture(0, self.render_target, render.BUFFER_COLOR_BIT)
    	render.draw(self.comp_pred)
    	render.disable_texture(0, self.render_target)
	end

    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_STENCIL_TEST)

    render.set_depth_mask(false)
    render.draw_debug2d()
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
    end
end
